# -*- coding: utf-8 -*-
"""Crop_distrubtion.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1v8GR0E3b1Jpbg-2a5PcCExJtGXFimwGj
"""

from google.colab import drive
drive.mount('/content/drive')

"""# Crop"""

import os
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

wheats = []
subdir = []
crop_folder = []
folder_path = "/content/drive/MyDrive/Official Folder for DroneAg Challenge/Data/Wheat"
for path, subdirs, files in os.walk(folder_path):
  crop_folder.append(files)

def crop(Winter_Wheat):
  for crop_images in crop_folder:   # get images files
    Crop  = pd.DataFrame({'Images': crop_images})  # convert to dataframe
    Crop ['time'] = Crop ['Images'].str[18:26]     # Select year-month-day from image name
    Crop ['time']= pd.to_datetime(Crop ['time'])   # Change column type to Dataframe
    Crop ['month_full'] = Crop ['time'].dt.month_name()   # Get month
    Crop ['year'] = pd.DatetimeIndex(Crop ['time']).year  # Get year
    cols=["year","month_full"]                            
    Crop ['YM'] = Crop [cols].apply(lambda x: '-'.join(x.values.astype(str)), axis="columns")   # Get Month_year in one column
    Crop  = Crop .sort_values(by="time")            # Sorted by date

    plt.figure(figsize=(30,10))   # Define figure size
    ax = sns.countplot(x="YM", data=Crop )     # Table type
    plt.xlabel('\nDate',fontsize='30',color='black')   # X axis name
    plt.ylabel('Number of sample\n',fontsize='30',color='black')   # Y axis name
    plt.xticks(fontsize='14',color='black', rotation=45)           # X axis character
    plt.yticks(fontsize='14',color='red')                          # Y axis character
    plt.title("Crop  distrubtion\n",fontsize=40,fontweight='bold',color='indigo')  # Title of table

    for p in ax.patches:
      ax.annotate(f'\n{p.get_height()}', (p.get_x()+0.2, p.get_height()), ha='left', va='baseline', color='black', size=15)    # height and size of count
    plt.savefig('Crop.png', bbox_inches='tight')        # export to image file
    plt.show()

crop(crop_folder)

